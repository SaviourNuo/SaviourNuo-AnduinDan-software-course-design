# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'GUI_SCD.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtCore import *
from PyQt5.QtGui import *
from PyQt5.QtWidgets import *
from UI.Thumbnail import *
from UI.FilePicker import TreeViewDialog
from UI.ProgressBar import ProgressBarDialog
from UI.ModalError import ModalErrorTextDialog
import neural_networks.pytorch_classification.Test5_resnet as resModel
import sys
import UI.pic_rc
import network_spider.getImage3_being as being
import network_spider.getImage8_baidu as baidu  
sys.path.append(".") #将当前工作目录添加到寻找module的path里


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(834, 621)  #主窗体创建
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")  #中心窗口部件创建
        self.label_Keywords = QtWidgets.QLabel(self.centralwidget)
        self.label_Keywords.setGeometry(QtCore.QRect(11, 81, 81, 31))
        self.label_Keywords.setStyleSheet("")
        self.label_Keywords.setObjectName("label_Keywords")  #文字标签“关键字”创建
        self.pushButton_Spider = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_Spider.setGeometry(QtCore.QRect(390, 80, 131, 81))
        self.pushButton_Spider.setStyleSheet("font: 14pt \"黑体\";")
        self.pushButton_Spider.setObjectName("pushButton_Spider") #按钮“爬取”创建
        self.label_Title = QtWidgets.QLabel(self.centralwidget)
        self.label_Title.setGeometry(QtCore.QRect(100, 20, 641, 41))
        self.label_Title.setObjectName("label_Title")  #标题“快速文本/非文本场景图像分类系统”创建
        self.label_PicNum = QtWidgets.QLabel(self.centralwidget)
        self.label_PicNum.setGeometry(QtCore.QRect(10, 130, 108, 31))
        self.label_PicNum.setObjectName("label_PicNum")  #文字标签“爬取数量”创建
        self.pushButton_Thumbnail = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_Thumbnail.setGeometry(QtCore.QRect(680, 240, 131, 81))
        self.pushButton_Thumbnail.setStyleSheet("font: 14pt \"黑体\";")
        self.pushButton_Thumbnail.setObjectName("pushButton_Thumbnail")  #按钮“图片预览”创建
        self.textEdit_Keywords = QtWidgets.QTextEdit(self.centralwidget)
        self.textEdit_Keywords.setGeometry(QtCore.QRect(110, 80, 271, 31))
        self.textEdit_Keywords.setObjectName("textEdit_Keywords")  #文字输入框“关键字”创建
        self.textEdit_Thumbnail = QtWidgets.QTextEdit(self.centralwidget)
        self.textEdit_Thumbnail.setGeometry(QtCore.QRect(140, 130, 241, 31))
        self.textEdit_Thumbnail.setObjectName("textEdit_Thumbnail")  #文字输入框“爬取数量”创建
        self.pushButton_Predict = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_Predict.setGeometry(QtCore.QRect(540, 80, 131, 81))
        self.pushButton_Predict.setStyleSheet("font: 14pt \"黑体\";")
        self.pushButton_Predict.setObjectName("pushButton_Predict")  #按钮“预测”创建
        self.radioButton_Crawled = QtWidgets.QRadioButton(self.centralwidget)
        self.radioButton_Crawled.setGeometry(QtCore.QRect(680, 340, 91, 19))
        self.radioButton_Crawled.setStyleSheet("font: 9pt \"黑体\";")
        self.radioButton_Crawled.setObjectName("radioButton_Crawled")  #单选项“爬取图片”创建
        self.radioButton_Class = QtWidgets.QRadioButton(self.centralwidget)
        self.radioButton_Class.setGeometry(QtCore.QRect(680, 370, 115, 19))
        self.radioButton_Class.setStyleSheet("font: 9pt \"黑体\";")
        self.radioButton_Class.setObjectName("radioButton_Class")  #单选项“文本/非文本”创建
        self.listView = QtWidgets.QListView(self.centralwidget)
        self.listView.setGeometry(QtCore.QRect(0, 0, 841, 591))
        self.listView.setStyleSheet("border-image: url(:/picture/888035.jpg);")
        self.listView.setObjectName("listView")  #背景图片VioletEvergarden创建
        self.label_StoreAd = QtWidgets.QLabel(self.centralwidget)
        self.label_StoreAd.setGeometry(QtCore.QRect(10, 180, 108, 31))
        self.label_StoreAd.setObjectName("label_StoreAd")  #文字标签“存储路径”创建
        self.lineEdit_StorePath = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_StorePath.setGeometry(QtCore.QRect(130, 180, 251, 31))
        self.lineEdit_StorePath.setObjectName("lineEdit_StorePath")  #单行文字输入框“存储路径”创建
        self.pushButton_AdChoose = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_AdChoose.setGeometry(QtCore.QRect(390, 180, 131, 28))
        self.pushButton_AdChoose.setStyleSheet("font: 12pt \"黑体\";")
        self.pushButton_AdChoose.setObjectName("pushButton_AdChoose")  #按钮“路径选择”创建
        self.comboBox_SerchEngine = QtWidgets.QComboBox(self.centralwidget)
        self.comboBox_SerchEngine.setGeometry(QtCore.QRect(540, 180, 131, 31))
        self.comboBox_SerchEngine.setStyleSheet("font: 11pt \"黑体\";")
        self.comboBox_SerchEngine.setObjectName("comboBox_SerchEngine")
        self.comboBox_SerchEngine.addItem("")
        self.comboBox_SerchEngine.addItem("")
        self.comboBox_SerchEngine.addItem("")  #下拉框“搜索引擎”创建
        self.label_gif = QtWidgets.QLabel(self.centralwidget)
        self.label_gif.setGeometry(QtCore.QRect(690, 90, 121, 111))
        self.label_gif.setObjectName("label_gif")  #gif芭芭拉图像创建
        self.listView.raise_()
        self.label_Keywords.raise_()
        self.pushButton_Spider.raise_()
        self.label_Title.raise_()
        self.label_PicNum.raise_()
        self.pushButton_Thumbnail.raise_()
        self.textEdit_Keywords.raise_()
        self.textEdit_Thumbnail.raise_()
        self.pushButton_Predict.raise_()
        self.radioButton_Crawled.raise_()
        self.radioButton_Class.raise_()
        self.label_StoreAd.raise_()
        self.lineEdit_StorePath.raise_()
        self.pushButton_AdChoose.raise_()
        self.comboBox_SerchEngine.raise_()
        self.label_gif.raise_()  #以上的所有raise用于将这些控件在背景图片的上方显示，以实现“背景图片”的功能
        MainWindow.setCentralWidget(self.centralwidget)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        MainWindow.statusBar().showMessage('Copyright © AnduinDan/SaviourNuo All Rights Reserved')  #状态栏创建
        MainWindow.setWindowIcon(QIcon('./UI/icon.jpg'))  #窗体图标创建

        self.pushButton_Spider.clicked.connect(self.spider_progress_threads_create)  #绑定”爬取“按钮和对应爬虫线程创建槽函数
        self.pushButton_Thumbnail.clicked.connect(self.TreeViewDialog_display)  #绑定“图片预览”按钮和对应本机树状存储路径显示槽函数
        self.pushButton_AdChoose.clicked.connect(self.AdBrowse)  #绑定“路径选择”按钮与对应本机文件路径浏览/选择显示的槽函数
        self.pushButton_Predict.clicked.connect(self.PredictThreadCreate)  #绑定“预测”按钮与文本/非文本推理线程创建槽函数
        # self.comboBox_SerchEngine.currentIndexChanged.connect(self.EngineChange)  # 绑定信号和槽

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)


    def retranslateUi(self, MainWindow):  #retranslateUi主要用于设定所有出现在主窗体内的控件的文字及样式
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "主程序"))
        self.label_Keywords.setText(_translate("MainWindow", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'SimSun\'; font-size:9pt; font-weight:400; font-style:normal;\">\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:16pt;\">关键字</span></p></body></html>"))
        self.pushButton_Spider.setText(_translate("MainWindow", "爬取"))
        self.label_Title.setText(_translate("MainWindow", "<html><head/><body><p><span style=\" font-size:24pt; font-weight:600;\">快速文本/非文本场景图像分类系统</span></p></body></html>"))
        self.label_PicNum.setText(_translate("MainWindow", "<html><head/><body><p><span style=\" font-size:16pt;\">爬取数量</span></p></body></html>"))
        self.pushButton_Thumbnail.setText(_translate("MainWindow", "图片预览"))
        self.pushButton_Predict.setText(_translate("MainWindow", "预测"))
        self.radioButton_Crawled.setText(_translate("MainWindow", "爬取图片"))
        self.radioButton_Class.setText(_translate("MainWindow", "文本/非文本"))
        self.label_StoreAd.setText(_translate("MainWindow", "<html><head/><body><p><span style=\" font-size:16pt;\">存储路径</span></p><p><span style=\" font-size:16pt;\"><br/></span></p></body></html>"))
        self.pushButton_AdChoose.setText(_translate("MainWindow", "路径选择"))
        self.comboBox_SerchEngine.setItemText(0, _translate("MainWindow", "必应"))
        self.comboBox_SerchEngine.setItemText(1, _translate("MainWindow", "百度"))
        self.comboBox_SerchEngine.setItemText(2, _translate("MainWindow", "谷歌"))

        movie=QtGui.QMovie("./UI/barbara.gif")
        size=QtCore.QSize(self.label_gif.geometry().size())
        movie.setScaledSize(size)
        self.label_gif.setMovie(movie)
        movie.start()  #gif芭芭拉图像的显示及大小控制



    # def keyword_pass(self,keyword,totalNeed,StoragePath):
    #     self.spiderThread = QThread()
    #     if self.comboBox_SerchEngine.currentIndex()==0:
    #         self.spiderThread = being.SpiderThread(keyword,totalNeed,StoragePath) # 生成爬虫线程对象
    #         self.spiderThread.start()
    #     elif self.comboBox_SerchEngine.currentIndex()==1:
    #         self.spiderThread = baidu.SpiderThread(keyword,totalNeed,StoragePath) # 生成爬虫线程对象
    #         self.spiderThread.start()
    #     else:
    #         ModalErrorTextDialog("无此搜索引擎").exec_()

    def ProgressBarDialog_Display(self):  #从ProgressBar.py中调用类ProgressBarDialog，用于在创建爬虫线程后启动，同步显示爬取图片的进度
        ProgressBarDialog().exec_()  #窗体显示
        # self.progBarDialog = ProgressBarDialog()
        # self.progBarDialog.exec_()

    def spider_progress_threads_create(self):  #爬虫线程创建函数，多线程功能防止爬取过程中主线程阻塞窗体卡死
        keyword = self.textEdit_Keywords.toPlainText()  #用于获取文字输入框“关键字”中的内容，以字符串格式输出
        totalNeed = self.textEdit_Thumbnail.toPlainText()  #用于获取文字输入框“爬取数量”中的内容，以字符串格式输出
        StoragePath=self.lineEdit_StorePath.text()  #用于获取单行文字输入框“存储路径”中的内容，以字符串格式输出
        if not keyword: #若文字输入“关键字”字符串判空
            ModalErrorTextDialog("输入关键字为空").exec_() #模态框报错
            return #-1
        if not totalNeed.isdigit():  #若文字输入“爬取数量”判断为非阿拉伯非负整数
            ModalErrorTextDialog("数量非法，请使用阿拉伯非负整数").exec_() #模态框报错
            return #-1
        if not os.path.exists(self.lineEdit_StorePath.text()):  #若单行文字输入“存储路径”在本机中不存在
            ModalErrorTextDialog("路径非法").exec_() #模态框报错
            return #-1
        # self.keyword_pass(keyword,totalNeed,StoragePath);
        if  self.comboBox_SerchEngine.currentIndex()==0:  #若下拉表选择第一项“必应”
            self.spiderThread = being.SpiderThread(keyword,totalNeed,StoragePath) # 生成必应搜索引擎爬虫线程对象，传入“关键字”“爬取数量”“存储路径”
            self.spiderThread.start()  #启动线程
        elif self.comboBox_SerchEngine.currentIndex()==1:  #若下拉表选择第二项“百度”
            self.spiderThread = baidu.SpiderThread(keyword,totalNeed,StoragePath) # 生成百度搜索引擎爬虫线程对象，传入“关键字”“爬取数量”“存储路径”
            self.spiderThread.start()  #启动线程
        else:  #若下拉表选择第三项“谷歌”
            ModalErrorTextDialog("无此搜索引擎").exec_() #模态框报错
            return -1;
        self.ProgressBarDialog_Display();  #进度条窗体显示

    def PredictThreadCreate(self):  #推理线程创建函数，多线程功能防止推理过程中主线程阻塞窗体卡死
        if os.path.exists(self.lineEdit_StorePath.text()) and (self.lineEdit_StorePath.text())!=0: #若单行文字输入“存储路径”在本机中存在且非0
            self.predictThread = resModel.PredictThread(str(self.lineEdit_StorePath.text()))  #启动推理线程，输入变量为爬取图片的存储路径
            self.predictThread.start()  #线程启动
        else:
            ModalErrorTextDialog("路径非法").exec_() #模态框报错
            return #-1
        
    def AdBrowse(self):  #存储路径选择函数
        get_directory_path = QtWidgets.QFileDialog.getExistingDirectory(None,
                                    "选取指定文件夹",
                                    "C:/")  #用于获取树状本机全部路径，标题为“选取指定文件夹”，默认从C盘开始
        self.lineEdit_StorePath.setText(str(get_directory_path))  #将用户选定的路径注入“存储路径”单行文字输入框中

    def TreeViewDialog_display(self):  #树状路径产生函数，用于图片预览中后续显示缩略图
        if (self.radioButton_Crawled.isChecked()):  #若单项选择“爬取图片”
            if os.path.exists(self.lineEdit_StorePath.text()) and (self.lineEdit_StorePath.text())!=0: #若单行文字输入“存储路径”在本机中存在且非0
                TreeViewDialog(self.lineEdit_StorePath.text()).exec_()  #调用FilePicker中的TreeViewDialog，显示相应文件夹路径窗体，输入变量为爬取图片的存储地址
            else:
                ModalErrorTextDialog("路径非法").exec_() #模态框报错
                return #-1      
        elif (self.radioButton_Class.isChecked()):  #若单项选择“文本/非文本”
            TreeViewDialog(r".\neural_networks\classification_output").exec_() #调用FilePicker中的TreeViewDialog，显示相应文件夹路径窗体，输入变量固定推理输出地址
        else: #若未选择任何选项
            ModalErrorTextDialog("未选择图片预览目录").exec_() #模态框报错


# if __name__ == "__main__":
#     app = QtWidgets.QApplication(sys.argv)
#     MainWindow = QtWidgets.QMainWindow()
#     ui = Ui_MainWindow()
#     ui.setupUi(MainWindow)
#     MainWindow.show()
#     sys.exit(app.exec_()) #主线程退出


class AppMainWindow(QMainWindow):  #主窗体创建函数
    def __init__(self):
        super(QMainWindow,self).__init__()
        self.ui = Ui_MainWindow()
        self.ui.setupUi(self)
        self.setFixedSize(self.width(), self.height())  #限定主窗体不可拉伸
        self.show()
